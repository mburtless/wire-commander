// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Wire Commander provides an API based management layer for WireGuard",
    "title": "Wire Commander",
    "contact": {
      "name": "Matthew Burtless",
      "email": "mburtless@threepnet.com"
    },
    "version": "0.0.1"
  },
  "host": "wirecomdr.com",
  "basePath": "/",
  "paths": {
    "/peers": {
      "get": {
        "summary": "Get list of active peers",
        "operationId": "GetPeers",
        "responses": {
          "200": {
            "description": "Active peers",
            "schema": {
              "description": "Active peers",
              "type": "array",
              "title": "Peers",
              "items": {
                "$ref": "#/definitions/Peer"
              }
            }
          }
        }
      }
    },
    "/peers/{PeerName}": {
      "get": {
        "summary": "Get details of a peer",
        "operationId": "GetPeer",
        "responses": {
          "200": {
            "$ref": "#/responses/PeerResponse"
          }
        }
      },
      "put": {
        "summary": "Updates a peer",
        "operationId": "UpdatePeer",
        "responses": {
          "200": {
            "$ref": "#/responses/PeerResponse"
          }
        }
      },
      "post": {
        "summary": "Creates a new peer",
        "operationId": "CreatePeer",
        "responses": {
          "200": {
            "$ref": "#/responses/PeerResponse"
          }
        }
      },
      "delete": {
        "summary": "Deletes a peer",
        "operationId": "DeletePeer",
        "responses": {
          "200": {
            "description": "Returns empty object",
            "schema": {
              "type": "object",
              "title": "Empty Object"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Name of peer",
          "name": "PeerName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/peers/{PeerName}/config": {
      "get": {
        "summary": "Returns the client tunnel config of the peer",
        "operationId": "GetConfig",
        "responses": {
          "200": {
            "description": "The client tunnel config",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Name of peer",
          "name": "PeerName",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "Peer": {
      "type": "object",
      "title": "Peer",
      "properties": {
        "PeerName": {
          "description": "Name of peer",
          "type": "string",
          "title": "Peer Name"
        },
        "PublicKey": {
          "description": "Public key of peer",
          "type": "string",
          "title": "Public Key"
        }
      }
    }
  },
  "responses": {
    "PeerResponse": {
      "description": "The details of the peer",
      "schema": {
        "$ref": "#/definitions/Peer"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Wire Commander provides an API based management layer for WireGuard",
    "title": "Wire Commander",
    "contact": {
      "name": "Matthew Burtless",
      "email": "mburtless@threepnet.com"
    },
    "version": "0.0.1"
  },
  "host": "wirecomdr.com",
  "basePath": "/",
  "paths": {
    "/peers": {
      "get": {
        "summary": "Get list of active peers",
        "operationId": "GetPeers",
        "responses": {
          "200": {
            "description": "Active peers",
            "schema": {
              "description": "Active peers",
              "type": "array",
              "title": "Peers",
              "items": {
                "$ref": "#/definitions/Peer"
              }
            }
          }
        }
      }
    },
    "/peers/{PeerName}": {
      "get": {
        "summary": "Get details of a peer",
        "operationId": "GetPeer",
        "responses": {
          "200": {
            "description": "The details of the peer",
            "schema": {
              "$ref": "#/definitions/Peer"
            }
          }
        }
      },
      "put": {
        "summary": "Updates a peer",
        "operationId": "UpdatePeer",
        "responses": {
          "200": {
            "description": "The details of the peer",
            "schema": {
              "$ref": "#/definitions/Peer"
            }
          }
        }
      },
      "post": {
        "summary": "Creates a new peer",
        "operationId": "CreatePeer",
        "responses": {
          "200": {
            "description": "The details of the peer",
            "schema": {
              "$ref": "#/definitions/Peer"
            }
          }
        }
      },
      "delete": {
        "summary": "Deletes a peer",
        "operationId": "DeletePeer",
        "responses": {
          "200": {
            "description": "Returns empty object",
            "schema": {
              "type": "object",
              "title": "Empty Object"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Name of peer",
          "name": "PeerName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/peers/{PeerName}/config": {
      "get": {
        "summary": "Returns the client tunnel config of the peer",
        "operationId": "GetConfig",
        "responses": {
          "200": {
            "description": "The client tunnel config",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Name of peer",
          "name": "PeerName",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "Peer": {
      "type": "object",
      "title": "Peer",
      "properties": {
        "PeerName": {
          "description": "Name of peer",
          "type": "string",
          "title": "Peer Name"
        },
        "PublicKey": {
          "description": "Public key of peer",
          "type": "string",
          "title": "Public Key"
        }
      }
    }
  },
  "responses": {
    "PeerResponse": {
      "description": "The details of the peer",
      "schema": {
        "$ref": "#/definitions/Peer"
      }
    }
  }
}`))
}
